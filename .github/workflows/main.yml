name: eShopOnWeb

on:
  workflow_dispatch:
  push:
    branches: ['master']
  pull_request:
    branches: ['master']

jobs:
  build:
    defaults:
      run:
        shell: bash
        working-directory: ./src/Web
        
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4.1.1

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3.2.0
        with:
          dotnet-version: '7.0.x'

      - name: Restore
        run: dotnet restore
      
      - name: Build and Test
        run: dotnet test --configuration release 
      
      - name: Publish
        run: dotnet publish --configuration release

      - name: ðŸ“¤ Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: eshop-artifact
          path: ./src/Web/bin/release/net7.0/publish

  terraform:
    name: 'Terraform'
    needs: ['build']
    runs-on: ubuntu-latest

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
        
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    permissions:
      pull-requests: write

    outputs:
      PUBLIC_IP: ${{ steps.public_id.outputs.PUBLIC_IP }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
    
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
    
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
    
      # Run a terraform plan for pull requests only
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      # On push to main, build or change infrastructure according to Terraform configuration files
      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -auto-approve

      - name: Getting public ip address
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        id: public_id
        run: echo "PUBLIC_IP=$(terraform output instance_public_ip)" >> $GITHUB_OUTPUT

  deploy:
    name: deploy artifact
    runs-on: ubuntu-latest
    environment: 
      name: deploy
    steps:
    - name: checkout
      uses: actions/checkout@v4.1.1
  
    - name: Download artifact from build job
      uses: actions/download-artifact@v3
      with:
        name: eshop-artifact
          
    # - name: copy file to ec2-server
    #   uses: appleboy/scp-action@v0.1.4
    #   with:
    #     host: ${{ needs.terraform.outputs.PUBLIC_IP }}
    #     username: 'ec2-user'
    #     key: ${{ secrets.ESHOP_KEY_PAIR }}
    #     port: '22'
    #     source: ./eshop-artifact
    #     target: /wwwroot/publish/

    - name: copy artifacts to ec2-server
      uses: Hermanverschooten/ssh-copy-command-action@v1
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SOURCE: "./eshop-artifact"
        REMOTE_HOST: ${{ needs.terraform.outputs.PUBLIC_IP }}
        REMOTE_USER: 'ec2-user'
        TARGET: "/wwwroot/publish/"
        CMD: "sudo systemctl enable myeshop.service && sudo systemctl start myeshop.service"
      

